shared_buffers
#буфер PostgreSQL, ~ 25% RAM, можно больше, подбирается индивидуально,более 40% ОЗУ вряд ли будет полезно
wal_buffers
#Объём разделяемой памяти, который будет использоваться для буферизации данных WAL, ещё не записанных на диск.
#Значение по умолчанию, равное -1, задаёт размер, равный 1/32 (около 3%) от shared_buffers, но не меньше, чем 64 КБ и не больше,
#чем размер одного сегмента WAL (обычно 16 МБ). Это значение можно задать вручную, если выбираемое автоматически слишком мало или велико,
#но при этом любое положительное число меньше 32 КБ будет восприниматься как 32 КБ. Этот параметр можно задать только при запуске сервера.
#Содержимое буферов WAL записывается на диск при фиксировании каждой транзакции, так что очень большие значения вряд ли принесут
#значительную пользу. Однако значение как минимум в несколько мегабайт может увеличить быстродействие при записи на нагруженном сервере,
#когда сразу множество клиентов фиксируют транзакции. Автонастройка, действующая при значении по умолчанию (-1), в большинстве случаев
#выбирает разумные значения.
effective_cache_size
# по умолчанию 4GB,  влияет на оценку стоимости использования индекса;
#чем выше это значение, тем больше вероятность, что будет применяться сканирование по индексу,
#чем ниже, тем более вероятно, что будет выбрано последовательное сканирование
#установка бОльшего значения выгоднее
work_mem
#Задаёт объём памяти, который будет использоваться для внутренних операций сортировки и хеш-таблиц,
#прежде чем будут задействованы временные файлы на диске. Значение по умолчанию — четыре мегабайта (4MB).
#Заметьте, что в сложных запросах одновременно могут выполняться несколько операций сортировки или хеширования,
#так что этот объём памяти будет доступен для каждой операции. Кроме того, такие операции могут выполняться одновременно в разных сеансах.
#Таким образом, общий объём памяти может многократно превосходить значение work_mem; это следует учитывать,
#выбирая подходящее значение. Операции сортировки используются для ORDER BY, DISTINCT и соединений слиянием.
#Хеш-таблицы используются при соединениях и агрегировании по хешу, а также обработке подзапросов IN с применением хеша.
maintenance_work_mem (integer)
#Задаёт максимальный объём памяти для операций обслуживания БД, в частности VACUUM, CREATE INDEX и ALTER TABLE ADD FOREIGN KEY.
#По умолчанию его значение — 64 мегабайта (64MB). Так как в один момент времени в сеансе может выполняться только одна такая операция,
#и обычно они не запускаются параллельно, это значение вполне может быть гораздо больше work_mem. Увеличение этого значения может привести
#к ускорению операций очистки и восстановления БД из копии.
#Учтите, что когда выполняется автоочистка, этот объём может быть выделен autovacuum_max_workers раз, поэтому не стоит устанавливать
#значение по умолчанию слишком большим. Возможно, будет лучше управлять объёмом памяти для автоочистки отдельно,
#изменяя autovacuum_work_mem.
synchronous_commit
#Определяет, будет ли сервер при фиксировании транзакции ждать, пока записи из WAL сохранятся на диске, прежде чем сообщить клиенту
#об успешном завершении операции. Допустимые значения: on, remote_write, local и off. Значение по умолчанию
#(оно же самое безопасное) — on. Со значением off может образоваться окно от момента, когда клиент узнаёт об успешном завершении,
#до момента, когда транзакция действительно гарантированно защищена от сбоя. (Максимальный размер окна равен тройному значению
#wal_writer_delay.) В отличие от fsync, значение off для этого параметра не угрожает целостности данных: сбой операционной системы или
#базы данных может привести к потере последних транзакций, считавшихся зафиксированными, но состояние базы данных будет точно таким же,
#как и в случае штатного прерывания этих транзакций. Поэтому выключение режима synchronous_commit может быть полезной альтернативой
#отключению fsync, когда производительность важнее, чем надёжная гарантия сохранности каждой транзакции.
checkpoint_timeout (integer)
#Максимальное время между автоматическими контрольными точками в WAL (в секундах). Допускаются значения от 30 секунд до одного часа.
#Значение по умолчанию — пять минут (5min). Увеличение этого параметра может привести к увеличению времени, которое потребуется для
#восстановления после сбоя. Задать этот параметр можно только в postgresql.conf или в командной строке при запуске сервера.
checkpoint_completion_target (floating point)
#Задаёт целевое время для завершения процедуры контрольной точки, как коэффициент для общего времени между контрольными точками.
#По умолчанию это значение равно 0.5
